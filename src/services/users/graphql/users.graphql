mutation CreateUserGroup($input: UserGroupInput!) {
  createUserGroup(userGroup: $input) {
    id
    name
    accountId
    ownerId
    userIdList
    createdAt
    updatedAt
  }
}

query UsersAdvanced($page: Int!, $pageSize: Int!, $filters: UserAdvancedFilters!, $sort: String!) {
  usersAdvanced(page: $page, pageSize: $pageSize, filters: $filters, sort: $sort) {
    totalCount
    content {
      id
      name
      email
      allowAllAdvertisers
      roleType
      isFirstTimeLogin
      active
      accountId
      firstName
      lastName
      userType
      timeZoneName
      phone
      lastLoginTimestamp
      firstLoginTimestamp
      useCustomBranding
      advertiserAccess {
        accountId
        userId
        advertisersMapping
      }
      permissions {
        accountId
        userId
        accessLevel
        permissionType
      }
    }
  }
}

query UsersNameList($page: Int!, $pageSize: Int!, $filters: UserAdvancedFilters!, $sort: String!) {
  usersAdvanced(page: $page, pageSize: $pageSize, filters: $filters, sort: $sort) {
    totalCount
    content {
      id
      name
    }
  }
}

query UserAdvancedById($id: ID!, $section: SectionType) {
  userAdvancedById(id: $id, section: $section) {
    id
    accountId
    name
    firstName
    lastName
    roleType
    userType
    timeZoneName
    phone
    email
    active
    enableTwoFactorAuthentication
    isFirstTimeLogin
    lastLoginTimestamp
    firstLoginTimestamp
    useCustomBranding
    deletedAt
    auth0Id
    advertiserAccess {
      id
      accountId
      userId
      advertiserIds
      advertisersMapping
    }
    permissions {
      id
      accountId
      userId
      accessLevel
      permissionType
    }
    allowAllAdvertisers
  }
}

query UserAdvancedByIds($ids: [ID!]!, $section: SectionType) {
  usersAdvancedByIds(ids: $ids, section: $section) {
    id
    accountId
    name
    firstName
    lastName
    roleType
    userType
    timeZoneName
    phone
    email
    active
    enableTwoFactorAuthentication
    isFirstTimeLogin
    lastLoginTimestamp
    firstLoginTimestamp
    useCustomBranding
    createdAt
    updatedAt
    deletedAt
    auth0Id
    advertiserAccess {
      id
      accountId
      userId
      advertiserIds
      advertisersMapping
      createdAt
      updatedAt
    }
    permissions {
      id
      accountId
      userId
      accessLevel
      permissionType
      createdAt
      updatedAt
    }
    allowAllAdvertisers
  }
}

mutation CreateUserAdvanced(
  $name: String!
  $accountId: ID!
  $firstName: String!
  $lastName: String!
  $email: String!
  $userType: String!
  $phone: String!
  $roleType: String!
  $timeZoneName: String!
  $password: String!
  $active: Boolean!
  $enableTwoFactorAuthentication: Boolean!
  $isFirstTimeLogin: Boolean!
  $useCustomBranding: Boolean!
  $permissions: [PermissionManagementInput!]!
  $advertiserAccess: [Int!]
  $allowAllAdvertisers: Boolean!
) {
  createUserAdvanced(
    userAdvanced: {
      name: $name
      accountId: $accountId
      firstName: $firstName
      lastName: $lastName
      email: $email
      userType: $userType
      phone: $phone
      roleType: $roleType
      timeZoneName: $timeZoneName
      password: $password
      active: $active
      enableTwoFactorAuthentication: $enableTwoFactorAuthentication
      isFirstTimeLogin: $isFirstTimeLogin
      useCustomBranding: $useCustomBranding
      permissions: $permissions
      advertiserAccess: $advertiserAccess
      allowAllAdvertisers: $allowAllAdvertisers
    }
  ) {
    auth0Id
    id
    accountId
    name
    firstName
    lastName
    roleType
    userType
    timeZoneName
    phone
    email
    active
    enableTwoFactorAuthentication
    isFirstTimeLogin
    lastLoginTimestamp
    firstLoginTimestamp
    useCustomBranding
    createdAt
    updatedAt
    deletedAt
    permissions {
      id
      permissionType
      accountId
      userId
      accessLevel
      createdAt
      updatedAt
    }
    advertiserAccess {
      id
      accountId
      userId
      advertiserIds
      createdAt
      updatedAt
    }
    allowAllAdvertisers
  }
}

mutation UpdateUserAdvanced(
  $id: ID!
  $name: String!
  $accountId: ID!
  $firstName: String!
  $lastName: String!
  $email: String!
  $userType: String!
  $phone: String!
  $roleType: String!
  $timeZoneName: String!
  $password: String!
  $active: Boolean!
  $enableTwoFactorAuthentication: Boolean!
  $isFirstTimeLogin: Boolean!
  $useCustomBranding: Boolean!
  $permissions: [PermissionManagementInput!]!
  $advertiserAccess: [Int!]
  $acceptedTermsAndConditions: Boolean
  $allowAllAdvertisers: Boolean!
) {
  updateUserAdvanced(
    id: $id
    userAdvanced: {
      name: $name
      accountId: $accountId
      firstName: $firstName
      lastName: $lastName
      email: $email
      userType: $userType
      phone: $phone
      roleType: $roleType
      timeZoneName: $timeZoneName
      password: $password
      active: $active
      enableTwoFactorAuthentication: $enableTwoFactorAuthentication
      isFirstTimeLogin: $isFirstTimeLogin
      useCustomBranding: $useCustomBranding
      permissions: $permissions
      advertiserAccess: $advertiserAccess
      allowAllAdvertisers: $allowAllAdvertisers
      acceptedTermsAndConditions: $acceptedTermsAndConditions
    }
  ) {
    id
    accountId
    name
    firstName
    lastName
    roleType
    userType
    timeZoneName
    phone
    email
    active
    enableTwoFactorAuthentication
    isFirstTimeLogin
    lastLoginTimestamp
    firstLoginTimestamp
    useCustomBranding
    createdAt
    updatedAt
    deletedAt
    auth0Id
    advertiserAccess {
      id
      accountId
      userId
      advertiserIds
      createdAt
      updatedAt
    }
    permissions {
      id
      accountId
      userId
      accessLevel
      permissionType
      createdAt
      updatedAt
    }
    allowAllAdvertisers
  }
}

mutation DeleteUserById($id: ID!) {
  deleteUserById(id: $id)
}

query UserByToken {
  userByToken {
    id
    accountId
    name
    roleType
    userType
    timeZoneName
    email
    isFirstTimeLogin
    lastLoginTimestamp
    firstLoginTimestamp
    acceptedTermsAndConditions
    allowAllAdvertisers
  }
}

mutation ResendInvite($userId: ID!) {
  resendInvite(userId: $userId)
}

query UserGroupById($id: ID!) {
  userGroupById(id: $id) {
    id
    accountId
    name
    ownerId
    ownerName
    userIdList
    createdAt
    size
    updatedAt
    allowAllAdvertisers
    allowAllUserGroups
    usersMapping
  }
}

mutation UpdateUserGroup($id: ID!, $userInput: UserGroupInput!) {
  updateUserGroup(id: $id, userGroup: $userInput) {
    id
  }
}

mutation AcceptTermsAndConditions($userId: ID!, $accept: Boolean!) {
  acceptTermsAndConditions(userId: $userId, accept: $accept)
}

mutation AcceptTermsAndConditionsUserAdvanced($userId: ID!, $accept: Boolean!) {
  acceptTermsAndConditionsUserAdvanced(userId: $userId, accept: $accept)
}

mutation ToggleUserActiveById($id: ID!, $activate: Boolean!) {
  toggleUserActiveById(id: $id, activate: $activate) {
    id
    accountId
    name
    firstName
    lastName
    roleType
    userType
    timeZoneName
    phone
    email
    active
    enableTwoFactorAuthentication
    isFirstTimeLogin
    lastLoginTimestamp
    firstLoginTimestamp
    useCustomBranding
    createdAt
    updatedAt
    deletedAt
    auth0Id
    allowAllAdvertisers
  }
}

mutation GenerateApiKey {
  generateApiKey
}

mutation InValidateApiKey {
  inValidateApiKey
}

mutation UpdateSelf($id: ID!, $selfUpdateInput: selfUpdateInput!) {
  updateSelf(id: $id, selfUpdateInput: $selfUpdateInput) {
    id
  }
}
