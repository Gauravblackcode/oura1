import { useRouter } from 'next/router';
import useSWR from 'swr';
import TasksService from '@/services/tasks/tasks.service';
import { Task } from 'types';
import moment from 'moment';

const tasksService = new TasksService();

const fetcher = async (id: string) => {
  const task = await tasksService.getTaskById(id);
  return task;
};

const TaskDetail = () => {
  const router = useRouter();
  const { id } = router.query;

  const { data: task, error, isLoading } = useSWR<Task>(
    id ? id as string : null,
    fetcher
  );

  if (isLoading) {
    return (
      <div className="p-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6">
        <div className="text-red-500">Failed to load task</div>
      </div>
    );
  }

  if (!task) {
    return (
      <div className="p-6">
        <div className="text-gray-500">Task not found</div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-normal">{task.title}</h1>
      </div>

      <div className="space-y-6">
        <div>
          <h2 className="text-lg font-normal mb-2">Description</h2>
          <p className="text-gray-700">{task.description || 'No description provided'}</p>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <h2 className="text-lg font-normal mb-2">Due Date</h2>
            <p className="text-gray-700">
              {task.dueDate ? moment(task.dueDate).format('MMMM D, YYYY') : 'No due date'}
            </p>
          </div>

          <div>
            <h2 className="text-lg font-normal mb-2">Priority</h2>
            <p className="text-gray-700">{task.priority}</p>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <h2 className="text-lg font-normal mb-2">Status</h2>
            <p className="text-gray-700">{task.status}</p>
          </div>

          <div>
            <h2 className="text-lg font-normal mb-2">Created</h2>
            <p className="text-gray-700">
              {moment(task.createdAt).format('MMMM D, YYYY')}
            </p>
          </div>
        </div>

        {task.goalId && (
          <div>
            <h2 className="text-lg font-normal mb-2">Associated Goal</h2>
            <p className="text-gray-700">{task.goalId}</p>
          </div>
        )}

        <div className="flex items-center">
          <input
            type="checkbox"
            checked={task.isGeneratedByAime}
            disabled
            className="mr-2"
          />
          <label>Generated by AIME</label>
        </div>

        <div className="flex justify-end space-x-4">
          <button
            onClick={() => router.push('/tasks')}
            className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Back to Tasks
          </button>
          <button
            onClick={() => router.push(`/tasks/${id}/edit`)}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            Edit Task
          </button>
        </div>
      </div>
    </div>
  );
};

export default TaskDetail;