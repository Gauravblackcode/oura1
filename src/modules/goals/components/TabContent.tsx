import React, { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';
import styles from '../goals.module.scss';
import Image from 'next/image';
import PenIcon from '../../../assets/images/anime.svg';

// Dynamically import the editor to avoid SSR issues
const MdEditor = dynamic(() => import('react-markdown-editor-lite'), {
    ssr: false,
    loading: () => <p>Loading editor...</p>
});

interface TabContentProps {
    activeTab: string;
    noteContent: string;
    taskContent: string;
    eventContent: string;
    setNoteContent: (content: string) => void;
    setTaskContent: (content: string) => void;
    setEventContent: (content: string) => void;
    applyFormatting: (type: string, contentType: string) => void;
}

export const TabContent: React.FC<TabContentProps> = ({
    activeTab,
    noteContent,
    taskContent,
    eventContent,
    setNoteContent,
    setTaskContent,
    setEventContent,
    applyFormatting
}) => {
    // Initialize markdown parser on client side only
    const [mdParser, setMdParser] = useState<any>(null);

    useEffect(() => {
        // Initialize markdown-it parser on client side
        const loadDependencies = async () => {
            const MarkdownIt = (await import('markdown-it')).default;
            setMdParser(new MarkdownIt());

            // Import CSS on client side only
            await import('react-markdown-editor-lite/lib/index.css');
        };

        loadDependencies();
    }, []);

    // Handle editor change
    const handleEditorChange = (data: { text: string, html: string }, contentType: string) => {
        if (contentType === 'notes') {
            setNoteContent(data.text);
        } else if (contentType === 'tasks') {
            setTaskContent(data.text);
        } else if (contentType === 'events') {
            setEventContent(data.text);
        }
    };

    // Editor configuration to allow editing
    const editorConfig = {
        view: {
            menu: true,
            md: true,  // Show markdown editing area
            html: true, // Show preview
            fullScreen: true,
            hideMenu: false,
        },
        canView: {
            menu: true,
            md: true,
            html: true,
            fullScreen: true,
            hideMenu: true,
        }
    };

    // If markdown parser is not loaded yet, show loading
    if (!mdParser) {
        return <div>Loading editor...</div>;
    }

    if (activeTab === "notes") {
        return (
            <>
                <div className={styles.contentBox}>
                    <MdEditor
                        value={noteContent}
                        style={{ height: '200px' }}
                        renderHTML={text => mdParser.render(text)}
                        onChange={data => handleEditorChange(data, 'notes')}
                        placeholder="Write your note here..."
                        config={editorConfig}
                    />
                    <div className={styles.contentFooter}>
                        <div className={styles.tagIndicator}>
                            <span className={styles.tagDot}></span>
                            <span>Personal</span>
                        </div>
                        <button type="button" className={styles.saveButton}>
                            Save
                        </button>
                    </div>
                </div>

                {/* Generated by Aime */}
                <div className={styles.aimeIndicator}>
                    <span>
                        <Image
                            src={PenIcon}
                            alt="Pen icon"
                            width={16}
                            height={16}
                            style={{ marginRight: "4px", verticalAlign: "middle" }}
                        />
                        Generated by Aime
                    </span>
                </div>

                {/* New Note Button */}
                <div className={styles.newItemButton}>
                    <span className={styles.newItemIcon}>+</span>
                    <span className={styles.newItemText}>New Note</span>
                </div>
            </>
        );
    }

    if (activeTab === "tasks") {
        return (
            <>
                <div className={styles.contentBox}>
                    <MdEditor
                        value={taskContent}
                        style={{ height: '200px' }}
                        renderHTML={text => mdParser.render(text)}
                        onChange={data => handleEditorChange(data, 'tasks')}
                        placeholder="Add your task details here..."
                        config={editorConfig}
                    />
                    <div className={styles.contentFooter}>
                        <div style={{ display: "flex", gap: "10px", alignItems: "center" }}>
                            <select
                                style={{
                                    padding: "5px",
                                    borderRadius: "4px",
                                    border: "1px solid #CED4DA",
                                    fontFamily: "'Montserrat', sans-serif",
                                    fontSize: "14px"
                                }}
                            >
                                <option>No tag</option>
                                <option>Personal</option>
                                <option>Work</option>
                                <option>Travel</option>
                            </select>
                            <input
                                type="date"
                                style={{
                                    padding: "5px",
                                    borderRadius: "4px",
                                    border: "1px solid #CED4DA",
                                    fontFamily: "'Montserrat', sans-serif",
                                    fontSize: "14px"
                                }}
                            />
                        </div>
                        <button type="button" className={styles.saveButton}>
                            Save
                        </button>
                    </div>
                </div>

                {/* New Task Button */}
                <div className={styles.newItemButton}>
                    <span className={styles.newItemIcon}>+</span>
                    <span className={styles.newItemText}>New Task</span>
                </div>
            </>
        );
    }

    if (activeTab === "events") {
        return (
            <>
                <div className={styles.contentBox}>
                    <MdEditor
                        value={eventContent}
                        style={{ height: '200px' }}
                        renderHTML={text => mdParser.render(text)}
                        onChange={data => handleEditorChange(data, 'events')}
                        placeholder="Add your event details here..."
                        config={editorConfig}
                    />
                    <div className={styles.contentFooter}>
                        <div style={{ display: "flex", gap: "10px", alignItems: "center" }}>
                            <input
                                type="date"
                                style={{
                                    padding: "5px",
                                    borderRadius: "4px",
                                    border: "1px solid #CED4DA",
                                    fontFamily: "'Montserrat', sans-serif",
                                    fontSize: "14px"
                                }}
                            />
                            <input
                                type="time"
                                style={{
                                    padding: "5px",
                                    borderRadius: "4px",
                                    border: "1px solid #CED4DA",
                                    fontFamily: "'Montserrat', sans-serif",
                                    fontSize: "14px"
                                }}
                            />
                        </div>
                        <button type="button" className={styles.saveButton}>
                            Save
                        </button>
                    </div>
                </div>

                {/* New Event Button */}
                <div className={styles.newItemButton}>
                    <span className={styles.newItemIcon}>+</span>
                    <span className={styles.newItemText}>New Event</span>
                </div>
            </>
        );
    }

    return null;
};